/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package no.ssb.gsim.client;

import com.apollographql.apollo.api.Response;
import io.reactivex.Single;
import no.ssb.gsim.client.graphql.GetUnitDatasetQuery;
import no.ssb.gsim.client.graphql.fragment.Components;
import org.junit.Test;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.Assert.assertTrue;

public class LibraryTest {

    @Test
    public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testGraphQL() {

        GsimClient gsimClient = GsimClient.newClient(new GsimClient.Configuration());

        Single<Response<GetUnitDatasetQuery.Data>> dataset = gsimClient.getUnitDataset("b9c10b86-5867-4270-b56e-ee7439fe381e");

        Response<GetUnitDatasetQuery.Data> response = dataset.blockingGet();

        GetUnitDatasetQuery.UnitDataSetById dataSetById = response.data().UnitDataSetById();
        GetUnitDatasetQuery.UnitDataStructure structure = dataSetById.unitDataStructure();
        GetUnitDatasetQuery.LogicalRecords logicalRecords = structure.logicalRecords();
        List<Components> components = logicalRecords.edges().stream().map(edge -> edge.node()).map(node -> node.fragments().components())
                .collect(Collectors.toList());
        components.forEach(c -> {
            System.out.println(c.identifierComponents());
            System.out.println(c.measureComponents());
            System.out.println(c.attributeComponents());
        });
    }
}
